{
  "author": {
    "name": "Scott González",
    "email": "scott.gonzalez@gmail.com",
    "url": "http://scottgonzalez.com"
  },
  "name": "browserstack",
  "description": "A client for working with the BrowserStack API.",
  "version": "1.0.1",
  "homepage": "https://github.com/scottgonzalez/node-browserstack",
  "repository": {
    "type": "git",
    "url": "git://github.com/scottgonzalez/node-browserstack.git"
  },
  "engines": {
    "node": ">=0.4.0"
  },
  "dependencies": {},
  "devDependencies": {
    "grunt": "0.3.x"
  },
  "main": "lib/browserstack.js",
  "readme": "# node-browserstack\n\nA node.js JavaScript client for working with [BrowserStack](http://browserstack.com) through its [API](https://github.com/browserstack/api).\n\nSupport this project by [donating on Gittip](https://www.gittip.com/scottgonzalez/).\n\n## Installation\n\n```\nnpm install browserstack\n```\n\n## Usage\n\n```javascript\nvar BrowserStack = require( \"browserstack\" );\nvar client = BrowserStack.createClient({\n\tusername: \"foo\",\n\tpassword: \"p455w0rd!!1\"\n});\n\nclient.getBrowsers(function( error, browsers ) {\n\tconsole.log( \"The following browsers are available for testing\" );\n\tconsole.log( browsers );\n});\n```\n\n## API\n\n*Note: The API documented here is for the latest supported version (v3). For earlier versions, please see [the wiki](https://github.com/scottgonzalez/node-browserstack/wiki/API).*\n\n### browser objects\n\nA common pattern in the API is a \"browser object\" which is just a plain object with the following properties:\n\n* `os`: The operating system.\n* `os_version`: The operating system version.\n* `browser`: The browser name.\n* `browser_version`: The browser version.\n* `device`: The device name.\n\nA browser object may only have one of `browser` or `device` set; which property is set will depend on `os`.\n\n### worker objects\n\nWorker objects are extended [browser objects](#browser-objects) which contain the following additional properties:\n\n* `id`: The worker id.\n* `status`: A string representing the current status of the worker.\n  * Possible statuses: `\"running\"`, `\"queue\"`.\n\n### BrowserStack.createClient( settings )\n\nCreates a new client instance.\n\n* `settings`: A hash of settings that apply to all requests for the new client.\n  * `username`: The username for the BrowserStack account.\n  * `password`: The password for the BrowserStack account.\n  * `version` (optional; default: `3`): Which version of the BrowserStack API to use.\n  * `server` (optional; default: `{ host: \"api.browserstack.com\", port: 80 }`): An object containing `host` and `port` to connect to a different BrowserStack API compatible service.\n\n### client.getBrowsers( callback )\n\nGets the list of available browsers.\n\n* `callback` (`function( error, browsers )`): A callback to invoke when the API call is complete.\n  * `browsers`: An array of [browser objects](#browser-objects).\n\n### client.createWorker( settings, callback )\n\nCreates a worker.\n\n* `settings`: A hash of settings for the worker (an extended [browser object](#browser-objects)).\n  * `os`: See [browser object](#browser-objects) for details.\n  * `os_version`: See [browser object](#browser-objects) for details.\n  * `browser`: See [browser object](#browser-objects) for details.\n  * `browser_version`: See [browser object](#browser-objects) for details.\n  * `device`: See [browser object](#browser-objects) for details.\n  * `url` (optional): Which URL to navigate to upon creation.\n  * `timeout` (optional): Maximum life of the worker (in seconds). Use 0 for \"forever\" (BrowserStack will kill the worker after 1,800 seconds).\n* `callback` (`function( error, worker )`): A callback to invoke when the API call is complete.\n  * `worker` A [worker object](#worker-objects).\n\n*Note: A special value of `\"latest\"` is supported for `browser_version`, which will use the latest stable version.*\n\n### client.getWorker( id, callback )\n\nGets the status of a worker.\n\n* `id`: The id of the worker.\n* `callback` (`function( error, worker )`): A callback to invoke when the API call is complete.\n  * `worker`: A [worker object](#worker-objects).\n\n### client.terminateWorker( id, callback )\n\nTerminates an active worker.\n\n* `id`: The id of the worker to terminate.\n* `callback` (`function( error, data )`): A callback to invoke when the API call is complete.\n  * `data`: An object with a `time` property indicating how long the worker was alive.\n\n### client.getWorkers( callback )\n\nGets the status of all workers.\n\n* `callback` (`function( error, workers )`): A callback to invoke when the API call is complete.\n  * `workers`: An array of [worker objects](#worker-objects).\n\n### client.takeScreenshot( id, callback )\n\nTake a screenshot at current state of worker.\n\n* `callback` (`function( error, data )`): A callback to invoke when the API call is complete.\n  * `data`: An object with a `url` property having the public url for the screenshot.\n\n### client.getLatest( browser, callback )\n\nGets the latest version of a browser.\n\n* `browser`: Which browser to get the latest version for. See [browser object](#browser-objects) for details.\n* `callback` (`function( error, version )`): A callback to invoke when the version is determined.\n  * `version`: The latest version of the browser.\n\n*Note: Since mobile devices do not have version numbers, there is no latest version.*\n\n### client.getLatest( callback )\n\nGets the latest version of all browsers.\n\n* `callback` (`function( error, versions )`): A callback to invoke when the versions are determined.\n  * `versions`: A hash of browser names and versions.\n\n### client.getApiStatus( callback )\n\n* `callback` (`function( error, status )`): A callback to invoke when the status is determined.\n  * `used_time`: Time used so far this month, in seconds.\n  * `total_available_time`: Total available time, in seconds. Paid plans have unlimited API time and will receive the string `\"Unlimited Testing Time\"` instead of a number.\n  * `running_sessions`: Number of running sessions.\n  * `sessions_limit`: Number of allowable concurrent sessions.\n\n## License\n\nCopyright 2014 Scott González. Released under the terms of the MIT license.\n\n---\n\nSupport this project by [donating on Gittip](https://www.gittip.com/scottgonzalez/).\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/scottgonzalez/node-browserstack/issues"
  },
  "_id": "browserstack@1.0.1",
  "dist": {
    "shasum": "41cb44376a43e991ad4635a038ba2a16c13d701f"
  },
  "_from": "browserstack@1.0.1",
  "_resolved": "https://registry.npmjs.org/browserstack/-/browserstack-1.0.1.tgz"
}
